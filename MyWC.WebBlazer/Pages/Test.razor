@page "/test"
@using MyWC.DataModels.Models;
@using MyWC.WebBlazer.Services;
@using MyWC.Logic.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IFrontEndService frontEndService;

<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgb(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (person == null)
{
    <h4><i class="fa-li fa fa-spinner fa-spin"></i>Загружаем...</h4>
}
else
{
    <div class="card">
        <h4 class="card-header">Клиент</h4>
        <div class="card-body">
            <EditForm Model="@person" OnValidSubmit="SavePerson">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Id клиента:</label>
                    <div class="col-sm-4">
                        <InputNumber @bind-Value="@person.Id" disabled readonly />
                    </div>
                </div>

                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Имя</label>
                    <div class="col-sm-4">
                        <InputText @bind-Value="@person.FirstName" placeholder="Имя клиента" />
                        <ValidationMessage For="@(() => @person.FirstName)" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Фамилия</label>
                    <div class="col-sm-4">
                        <InputText @bind-Value="@person.LastName" placeholder="Фамилия клиента" />
                        <ValidationMessage For="@(() => @person.LastName)" />
                    </div>
                </div>
                <div class="mb-3 row">
                    <label class="col-sm-2 col-form-label">Город</label>
                    <div class="col-sm-4">
                        <InputText @bind-Value="@person.City" placeholder="Город проживания" />
                        <ValidationMessage For="@(() => @person.City)" />
                    </div>
                </div>
                <div class="text-center">
                    <button class="btn btn-primary mb-3" type="submit">Сохранить</button>
                    <button class="btn btn-primary mb-3" @onclick="ClearForm">Очистить форму</button>
                </div>
            </EditForm>
        </div>
        <div class="card-body bg-dark">
            @if (personList == null)
            {
                <h4><i class="fa-li fa fa-spinner fa-spin"></i>Загружаем...</h4>
            }
            else
            {
                <table class="table table-striped table-hover table-sm table-bordered bg-light">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">
                                <div class="container">
                                    <div class="row">
                                        <div class="col text-start">
                                            <span role="button" class="btn fa-solid @(SetSortIcon("FistName"))" @onclick="@(() => SortTable("FistName"))"></span>
                                            Имя
                                        </div>
                                        <div class="col text-end"><i class="fa-solid fa-filter"></i></div>
                                    </div>
                                    <div class="row">
                                        <div class="input-group mb-3">
                                            <span class="input-group-text" id="basic-addon1"><i class="fa-solid fa-filter"></i></span>
                                            <input class="form-control" @bind=inputNameValue @oninput="NameFilterTable" />
                                            <span role="button" class="input-group-text" @onclick="NameFilterTableX"><i class="fa-solid fa-xmark"></i></span>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="container">
                                    <div class="row">
                                        <div class="col text-start">
                                            <span role="button" class="btn fa-solid @(SetSortIcon("LastName"))" @onclick="@(() => SortTable("LastName"))"></span>
                                            Фамилия
                                        </div>
                                        <div class="col text-end"><i class="fa-solid fa-filter"></i></div>
                                    </div>
                                    <div class="row">
                                        <div class="input-group mb-3">
                                            <span class="input-group-text" id="basic-addon1"><i class="fa-solid fa-filter"></i></span>
                                            <input class="form-control" @bind=inputLNameValue @oninput="LNameFilterTable" />
                                            <span role="button" class="input-group-text" @onclick="LNameFilterTableX"><i class="fa-solid fa-xmark"></i></span>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th scope="col">
                                <div class="container">
                                    <div class="row">
                                        <div class="col text-start">
                                            <span role="button" class="btn fa-solid @(SetSortIcon("City"))" @onclick="@(() => SortTable("City"))"></span>
                                            Город
                                        </div>
                                        <div class="col text-end"><i class="fa-solid fa-filter"></i></div>
                                    </div>
                                    <div class="row">
                                        <div class="input-group mb-3">
                                            <span class="input-group-text" id="basic-addon1"><i class="fa-solid fa-filter"></i></span>
                                            <input class="form-control" @bind=inputCityValue @oninput="CityFilterTable" />
                                            <span role="button" class="input-group-text" @onclick="CityFilterTableX"><i class="fa-solid fa-xmark"></i></span>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th scope="col" style="width: 20%">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (personList.Any())
                        {
                            @foreach (var item in personList)

                            {
                                <tr>
                                    <th scope="row">@item.Id</th>
                                    <td>@item.FirstName</td>
                                    <td>@item.LastName</td>
                                    <td>@item.City</td>
                                    <td>
                                        <i type="button" class="fa-solid fa-file-pen text-primary" @onclick="(() => EditButtonClick(item))"></i>
                                        <i type="button" class="fa-solid fa-trash text-danger" @onclick="(() => DeleteButtonClick(item))"></i>
                                    </td>
                                </tr>


                            }
                        }
                    </tbody>
                </table>

            }
        </div>
    </div>
}

@if (showEditPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Редактирование карточки клиента</h5>
                <span class="btn-close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@personToUpdate" OnValidSubmit="UpdatePerson">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="input-group-sm col-5">
                            <label>Имя: </label>
                            <InputText @bind-Value="@personToUpdate.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => personToUpdate.FirstName)" />

                        </div>
                    </div>
                    <div class="row">
                        <div class="input-group-sm col-5">
                            <label>Фамилия: </label>
                            <InputText @bind-Value="@personToUpdate.LastName" class="form-control" />
                            <ValidationMessage For="@(() => personToUpdate.LastName)" />

                        </div>
                    </div>
                    <div class="row">
                        <div class="input-group-sm col-5">
                            <label>Город: </label>
                            <InputText @bind-Value="@personToUpdate.City" class="form-control" />
                            <ValidationMessage For="@(() => personToUpdate.City)" />

                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Обновить" @onclick="UpdatePerson" />
                <input type="button" class="btn btn-primary" value="Отменить" @onclick="ToggleEditPopup" />
            </div>
        </div>
    </div>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>Удаление карточки клиента</h5>
                    <span class="btn-close" @onclick="ToggleDeletePopup">&times;</span>
                </div>
                <div class="modal-body">
                    Вы точно хотите удалить карточку клиента: <span style="background-color:yellow">@personToDelete.FirstName @personToDelete.LastName ?</span>

                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-primary" value="Удалить" @onclick="DeletePerson" />
                    <input type="button" class="btn btn-primary" value="Отменить" @onclick="ToggleDeletePopup" />
                </div>
            </div>
        </div>
    </div>
}

@if (successPopup == true)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert <span class="btn-close" @onclick="ToggleSuccessPopup">&times; </span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup"></input>
            </div>
        </div>
    </div>
}


@code
{
    public EventCallback notify { get; set; }

    public Person person { get; set; } //Переменная для Edit
    public Person personToUpdate { get; set; }
    public Person personToDelete { get; set; }
    public IEnumerable<Person> personList { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool successPopup = false;
    public string Message = string.Empty;

    private PersonSortState curentPersonSortTable {get; set;}

    private bool isSortedAscending = false;
    private string activeSortColumn;

    private string? inputNameValue { get; set; }
    private string inputLNameValue { get; set; }
    private string inputCityValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        person = new Person();
        await GetPersons();
    }

    private async Task SavePerson()
    {
        //В идеале надо сделать возврат Id нового добавленной записи
        var response = await frontEndService.PostPerson(person);
        Console.WriteLine(response);
        Message = "Карточка клиента добавлена успешно";
        ToggleSuccessPopup();
        person = new Person();
        await GetPersons();
    }

    private async Task UpdatePerson()
    {
        bool flag = await frontEndService.UpdatePerson(personToUpdate);
        ToggleEditPopup();
        if (flag)
        {
            Message = "Карточка клиента обнавлена успешно";
        }
        else
        {
            Message = "Карточка клиента не обновляется, попробуйте еще раз";
        }
        ToggleSuccessPopup();
        personToUpdate = new Person();
        await GetPersons();

    }

    private async Task DeletePerson()
    {
        bool flag = await frontEndService.DeletePerson(personToDelete.Id);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Карточка клиента удалена успешно";
        }
        else
        {
            Message = "Карточка клиента не удаляется, попробуйте еще раз";
        }
        ToggleSuccessPopup();
        person = new Person(); //TODO проверить переменную, возможно должна быть personToDelete
        await GetPersons();

    }

    private async Task GetPersons()
    {
        personList = await frontEndService.GetPersons();
    }

    //TODO разобраться почему один входящий и походу она вообще не нужна
    private async Task GetPersons(PersonSortState sortState)
    {
        personList = await frontEndService.GetPersons(sortState, "", "", "");
    }

    //TODO в корне пересмотреть фильтрацию, много функций,возможно сделать привязку к названиям столбца
    //TODO фильтр пропускает пробелы
    private async Task NameFilterTable(ChangeEventArgs args)
    {
        inputNameValue = args.Value?.ToString() ?? string.Empty;
        personList = await frontEndService.GetPersons(curentPersonSortTable, inputNameValue, inputLNameValue, inputCityValue);
    }
    private async Task LNameFilterTable(ChangeEventArgs args)
    {
        inputLNameValue = args.Value?.ToString() ?? string.Empty;
        await SortTable(activeSortColumn);
    }
    private async Task CityFilterTable(ChangeEventArgs args)
    {
        inputCityValue = args.Value?.ToString() ?? string.Empty;
        await SortTable(activeSortColumn);
    }
    private async Task NameFilterTableX()
    {
        inputNameValue = "";
        inputNameValue = "";
        await SortTable(activeSortColumn);
    }
    private async Task LNameFilterTableX()
    {
        inputLNameValue = "";
        await SortTable(activeSortColumn);
    }
    private async Task CityFilterTableX()
    {
        inputCityValue = "";
        await SortTable(activeSortColumn);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            PersonSortState sortTable = columnName switch
            {
                "FistName" => sortTable = PersonSortState.FistNameAsc,
                "LastName" => sortTable = PersonSortState.LastNameAsc,
                "City" => sortTable = PersonSortState.CityAsc,
                _ => sortTable = PersonSortState.IdAsk,
            };

            //person = new Person();
            curentPersonSortTable = sortTable;
            personList = await frontEndService.GetPersons(sortTable, inputNameValue, inputLNameValue, inputCityValue);
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                PersonSortState sortTable = columnName switch
                {
                    "FistName" => sortTable = PersonSortState.FistNameDesc,
                    "LastName" => sortTable = PersonSortState.LastNameDesc,
                    "City" => sortTable = PersonSortState.CityDesc,
                    _ => sortTable = PersonSortState.IdDesk,
                };
                curentPersonSortTable = sortTable;
                personList = await frontEndService.GetPersons(sortTable, inputNameValue, inputLNameValue, inputCityValue);
            }
            else
            {
                PersonSortState sortTable = columnName switch
                {
                    "FistName" => sortTable = PersonSortState.FistNameAsc,
                    "LastName" => sortTable = PersonSortState.LastNameAsc,
                    "City" => sortTable = PersonSortState.CityAsc,
                    _ => sortTable = PersonSortState.IdAsk,
                };
                curentPersonSortTable = sortTable;
                personList = await frontEndService.GetPersons(sortTable, inputNameValue, inputLNameValue, inputCityValue);
            }
            isSortedAscending = !isSortedAscending;
        }
    }


    private void ClearForm()
    {
        person = new Person();
    }

    private void EditButtonClick(Person _personToUpdate)
    {
        personToUpdate = _personToUpdate;
        ToggleEditPopup();
    }

    private void DeleteButtonClick(Person _personToDelete)
    {
        personToDelete = _personToDelete;
        ToggleDeletePopup();
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return "fa-sort btn-outline-secondary";
        }
        if (isSortedAscending)
        {
            return "fa-arrow-down-a-z btn-outline-primary";
        }
        else
        {
            return "fa-arrow-down-z-a btn-outline-primary";
        }
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
